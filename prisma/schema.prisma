generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int        @id @default(autoincrement())
  email                     String     @unique @db.VarChar(200)
  firstname                 String     @db.VarChar(200)
  password                  String     @db.VarChar(200)
  phone                     String?    @unique @db.VarChar(20)
  lastname                  String?    @db.VarChar(200)
  currentHashedRefreshToken String?    @db.VarChar(200)
  currentPasswordResetToken String?    @db.VarChar(200)
  isEmailConfirmed          Boolean    @default(false)
  projects                  Project[]
  areas                     Area[]
  resources                 Resource[]

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}

model Project {
  id          Int        @id @default(autoincrement())
  uuid        String     @unique
  title       String     @db.VarChar(200)
  description String
  progress    Int        @default(0)
  emoji       String
  isArchived  Boolean    @default(false)
  authorId    Int
  areas       Area[]     @relation("Projects")
  author      User       @relation(fields: [authorId], references: [id])
  boards      Board[]    @relation("Boards")
  parentId    Int?
  parent      Project?   @relation("SubProjects", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subprojects Project[]  @relation("SubProjects")
  tasks       Task[]     @relation("Project")
  resources   Resource[]
  createdAt   DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime   @updatedAt @db.Timestamptz(3)
}

model Area {
  id         Int       @id @default(autoincrement())
  uuid       String    @unique
  title      String    @db.VarChar(200)
  emoji      String
  authorId   Int
  author     User      @relation(fields: [authorId], references: [id])
  projects   Project[] @relation("Projects")
  parentId   Int?
  parent     Area?     @relation("SubAreas", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subareas   Area[]    @relation("SubAreas")
  isArchived Boolean   @default(false)
  createdAt  DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime  @updatedAt @db.Timestamptz(3)
}

model Resource {
  id           Int        @id @default(autoincrement())
  uuid         String     @unique
  title        String?    @db.VarChar(200)
  projectId    Int?       @unique
  emoji        String
  authorId     Int
  author       User       @relation(fields: [authorId], references: [id])
  project      Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskId       Int?       @unique
  task         Task?      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  parentId     Int?
  parent       Resource?  @relation("SubResources", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subResources Resource[] @relation("SubResources")
  isRoot       Boolean    @default(false)
  contentJSON  Json?
  contentHTML  String?
  isArchived   Boolean    @default(false)
  createdAt    DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime   @updatedAt @db.Timestamptz(3)
}

model Board {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique
  title       String   @db.VarChar(200)
  description String?
  projectId   Int
  project     Project  @relation("Boards", fields: [projectId], references: [id], onDelete: Cascade)
  columns     Column[]
  tasks       Task[]
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @updatedAt @db.Timestamptz(3)
}

model Column {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(200)
  boardId   Int
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks     Task[]
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}

model Task {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique
  title       String    @db.VarChar(200)
  description String?
  order       Float?
  boardId     Int?
  columnId    Int?
  projectId   Int?
  isCompleted Boolean   @default(false)
  isArchived  Boolean   @default(false)
  project     Project?  @relation("Project", fields: [projectId], references: [id])
  column      Column?   @relation(fields: [columnId], references: [id], onDelete: SetNull)
  board       Board?    @relation(fields: [boardId], references: [id], onDelete: SetNull)
  resource    Resource?
  dueDate     DateTime? @db.Timestamptz(3)
  createdAt   DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime  @updatedAt @db.Timestamptz(3)
}
