generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int       @id @default(autoincrement())
  email                     String    @unique @db.VarChar(200)
  firstname                 String    @db.VarChar(200)
  password                  String    @db.VarChar(200)
  phone                     String?   @unique @db.VarChar(20)
  lastname                  String?   @db.VarChar(200)
  currentHashedRefreshToken String?   @db.VarChar(200)
  currentPasswordResetToken String?   @db.VarChar(200)
  isEmailConfirmed          Boolean   @default(false)
  projects                  Project[]

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}

model Project {
  id          Int     @id @default(autoincrement())
  uuid        String  @unique
  title       String  @db.VarChar(200)
  description String
  progress    Int     @default(0)
  isArchived  Boolean @default(false)

  authorId Int
  author   User @relation(fields: [authorId], references: [id])

  boards Board[]

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}

model Board {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique
  title       String   @db.VarChar(200)
  description String?
  projectId   Int
  project     Project  @relation(fields: [projectId], references: [id])
  tasks       Task[]
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @updatedAt @db.Timestamptz(3)
}

model Task {
  id          Int        @id @default(autoincrement())
  uuid        String     @unique
  title       String     @db.VarChar(200)
  description String?
  boardId     Int
  board       Board      @relation(fields: [boardId], references: [id])
  status      TaskStatus
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}
